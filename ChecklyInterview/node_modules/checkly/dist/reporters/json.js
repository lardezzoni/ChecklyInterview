"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonBuilder = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const abstract_list_1 = __importDefault(require("./abstract-list"));
const util_1 = require("./util");
const outputFile = './checkly-json-report.json';
class JsonBuilder {
    constructor(options) {
        this.testSessionId = options.testSessionId;
        this.numChecks = options.numChecks;
        this.runLocation = options.runLocation;
        this.checkFilesMap = options.checkFilesMap;
        this.hasFilenames = !(options.checkFilesMap.size === 1 && options.checkFilesMap.has(undefined));
    }
    render() {
        var _a;
        const testSessionSummary = {
            testSessionId: this.testSessionId,
            numChecks: this.numChecks,
            runLocation: this.runLocation,
            checks: [],
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        for (const [_, checkMap] of this.checkFilesMap.entries()) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            for (const [_, { result, testResultId, numRetries }] of checkMap.entries()) {
                const check = {
                    result: result.hasFailures ? 'Fail' : 'Pass',
                    name: result.name,
                    checkType: result.checkType,
                    durationMilliseconds: (_a = result.responseTime) !== null && _a !== void 0 ? _a : null,
                    filename: null,
                    link: null,
                    runError: result.runError || null,
                    retries: numRetries,
                };
                if (this.hasFilenames) {
                    check.filename = result.sourceFile;
                }
                if (this.testSessionId && testResultId) {
                    check.link = `${(0, util_1.getTestSessionUrl)(this.testSessionId)}/results/${testResultId}`;
                }
                testSessionSummary.checks.push(check);
            }
        }
        return JSON.stringify(testSessionSummary, null, 2);
    }
}
exports.JsonBuilder = JsonBuilder;
class JsonReporter extends abstract_list_1.default {
    onBegin(checks, testSessionId) {
        super.onBegin(checks, testSessionId);
        (0, util_1.printLn)(`Running ${this.numChecks} checks in ${this._runLocationString()}.`, 2, 1);
    }
    onEnd() {
        var _a;
        this._printBriefSummary();
        const jsonBuilder = new JsonBuilder({
            testSessionId: this.testSessionId,
            numChecks: this.numChecks,
            runLocation: this._runLocationString(),
            checkFilesMap: this.checkFilesMap,
        });
        const json = jsonBuilder.render();
        const summaryFilename = (_a = process.env.CHECKLY_REPORTER_JSON_OUTPUT) !== null && _a !== void 0 ? _a : outputFile;
        fs.mkdirSync(path.resolve(path.dirname(summaryFilename)), { recursive: true });
        fs.writeFileSync(summaryFilename, json);
        (0, util_1.printLn)(`JSON report saved in '${path.resolve(summaryFilename)}'.`, 2);
        this._printTestSessionsUrl();
    }
}
exports.default = JsonReporter;
//# sourceMappingURL=json.js.map