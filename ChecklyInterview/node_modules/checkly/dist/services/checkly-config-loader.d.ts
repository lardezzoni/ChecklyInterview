import { CheckProps } from '../constructs/check';
import { Construct } from '../constructs/construct';
import type { Region } from '..';
import { ReporterType } from '../reporters/reporter';
import { PlaywrightConfig } from '../constructs/playwright-config';
export type CheckConfigDefaults = Pick<CheckProps, 'activated' | 'muted' | 'doubleCheck' | 'shouldFail' | 'runtimeId' | 'locations' | 'tags' | 'frequency' | 'environmentVariables' | 'alertChannels' | 'privateLocations' | 'retryStrategy' | 'alertEscalationPolicy'>;
export type ChecklyConfig = {
    /**
     * Friendly name for your project.
     */
    projectName: string;
    /**
     * Unique project identifier.
     */
    logicalId: string;
    /**
     * Git repository URL.
     */
    repoUrl?: string;
    /**
     * Checks default configuration properties.
     */
    checks?: CheckConfigDefaults & {
        /**
         * Glob pattern where the CLI looks for files containing Check constructs, i.e. all `.checks.ts` files
         */
        checkMatch?: string | string[];
        /**
         * List of glob patterns with directories to ignore.
         */
        ignoreDirectoriesMatch?: string[];
        playwrightConfig?: PlaywrightConfig;
        /**
         * Browser checks default configuration properties.
         */
        browserChecks?: CheckConfigDefaults & {
            /**
             * Glob pattern where the CLI looks for Playwright test files, i.e. all `.spec.ts` files
             */
            testMatch?: string | string[];
        };
        /**
         * Multistep checks default configuration properties.
         */
        multiStepChecks?: CheckConfigDefaults & {
            /**
             * Glob pattern where the CLI looks for Playwright test files, i.e. all `.spec.ts` files
             */
            testMatch?: string | string[];
        };
    };
    /**
     * CLI default configuration properties.
     */
    cli?: {
        runLocation?: keyof Region;
        privateRunLocation?: string;
        verbose?: boolean;
        failOnNoMatching?: boolean;
        reporters?: ReporterType[];
        retries?: number;
    };
};
export declare function loadFile(file: string): Promise<any>;
export declare function getChecklyConfigFile(): {
    checklyConfig: string;
    fileName: string;
} | undefined;
export declare function loadChecklyConfig(dir: string, filenames?: string[]): Promise<{
    config: ChecklyConfig;
    constructs: Construct[];
}>;
