"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const JSON5 = __importStar(require("json5"));
class PlaywrightConfigTemplate {
    constructor({ use, expect, timeout }) {
        this.playwrightConfig = {};
        if (use) {
            this.playwrightConfig.use = this.getUseParams(use);
        }
        if (expect) {
            this.playwrightConfig.expect = this.getExpectParams(expect);
        }
        this.playwrightConfig.timeout = timeout;
    }
    getUseParams(use) {
        return {
            baseURL: use.baseURL,
            colorScheme: use.colorScheme,
            geolocation: use.geolocation,
            locale: use.locale,
            permissions: use.permissions,
            timezoneId: use.timezoneId,
            viewport: use.viewport,
            deviceScaleFactor: use.deviceScaleFactor,
            hasTouch: use.hasTouch,
            isMobile: use.isMobile,
            javaScriptEnabled: use.javaScriptEnabled,
            acceptDownloads: use.acceptDownloads,
            extraHTTPHeaders: use.extraHTTPHeaders,
            httpCredentials: use.httpCredentials,
            ignoreHTTPSErrors: use.ignoreHTTPSErrors,
            offline: use.offline,
            actionTimeout: use.actionTimeout,
            navigationTimeout: use.navigationTimeout,
            testIdAttribute: use.testIdAttribute,
            launchOptions: use.launchOptions,
            contextOptions: use.contextOptions,
            bypassCSP: use.bypassCSP,
            userAgent: use.userAgent,
            proxy: use.proxy,
        };
    }
    getExpectParams(expect) {
        return {
            timeout: expect.timeout,
            toHaveScreenshot: expect.toHaveScreenshot,
            toMatchSnapshot: expect.toMatchSnapshot,
        };
    }
    getConfigTemplate() {
        return `const playwrightConfig = ${JSON5.stringify(this, { space: 2 })}`;
    }
}
exports.default = PlaywrightConfigTemplate;
//# sourceMappingURL=playwright-config-template.js.map