"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const baseCommand_1 = require("./baseCommand");
const recast = __importStar(require("recast"));
const checkly_config_loader_1 = require("../services/checkly-config-loader");
const playwright_config_loader_1 = require("../playwright/playwright-config-loader");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const core_1 = require("@oclif/core");
const playwright_config_template_1 = __importDefault(require("../playwright/playwright-config-template"));
class SyncPlaywright extends baseCommand_1.BaseCommand {
    async run() {
        core_1.ux.action.start('Syncing Playwright config to the Checkly config file', undefined, { stdout: true });
        const config = await (0, playwright_config_loader_1.loadPlaywrightConfig)();
        if (!config) {
            return this.handleError('Could not find any playwright.config file.');
        }
        const configFile = (0, checkly_config_loader_1.getChecklyConfigFile)();
        if (!configFile) {
            return this.handleError('Could not find a checkly config file');
        }
        const checklyAst = recast.parse(configFile.checklyConfig);
        const checksAst = this.findPropertyByName(checklyAst, 'checks');
        if (!checksAst) {
            return this.handleError('Unable to automatically sync your config file. This can happen if your Checkly config is ' +
                'built using helper functions or other JS/TS features. You can still manually set Playwright config values in ' +
                'your Checkly config: https://www.checklyhq.com/docs/cli/constructs-reference/#project');
        }
        const pwtConfig = new playwright_config_template_1.default(config).getConfigTemplate();
        const pwtConfigAst = this.findPropertyByName(recast.parse(pwtConfig), 'playwrightConfig');
        this.addOrReplacePlaywrightConfig(checksAst.value, pwtConfigAst);
        const checklyConfigData = recast.print(checklyAst, { tabWidth: 2 }).code;
        const dir = path_1.default.resolve(path_1.default.dirname(configFile.fileName));
        this.reWriteChecklyConfigFile(checklyConfigData, configFile.fileName, dir);
        core_1.ux.action.stop('✅ ');
        this.log('Successfully updated Checkly config file');
        this.exit(0);
    }
    handleError(message) {
        core_1.ux.action.stop('❌');
        this.log(message);
        this.exit(1);
    }
    findPropertyByName(ast, name) {
        let node;
        recast.visit(ast, {
            visitProperty(path) {
                if (path.node.key.name === name) {
                    node = path.node;
                }
                return false;
            },
        });
        return node;
    }
    addOrReplacePlaywrightConfig(ast, node) {
        const playWrightConfig = this.findPropertyByName(ast, 'playwrightConfig');
        if (playWrightConfig) {
            playWrightConfig.value = node.value;
        }
        else {
            ast.properties.push(node);
        }
    }
    reWriteChecklyConfigFile(data, fileName, dir) {
        fs_1.default.writeFileSync(path_1.default.join(dir, fileName), data);
    }
}
SyncPlaywright.hidden = false;
SyncPlaywright.description = 'Copy Playwright config into the Checkly config file.';
exports.default = SyncPlaywright;
//# sourceMappingURL=sync-playwright.js.map